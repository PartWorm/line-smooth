int n_points;
float[] poly_x;
float[] poly_y;
int n_new_points;
float[] new_poly_x;
float[] new_poly_y;

boolean show_original = true;

void setup() {
  size(700, 700);
  n_points = 572;
  poly_x = new float[] { 147,145,145,144,144,145,145,146,146,145,145,138,138,137,137,135,135,134,134,131,131,130,130,128,128,127,127,126,126,125,125,126,126,125,125,124,124,125,125,124,124,120,120,117,117,114,114,108,108,105,105,104,104,102,102,100,100,99,99,96,96,94,94,95,95,94,94,93,93,88,88,83,83,84,84,83,83,80,80,78,78,77,77,75,75,76,76,79,79,78,78,79,79,78,78,73,73,72,72,71,71,73,73,74,74,73,73,72,72,71,71,69,69,67,67,65,65,63,63,64,64,65,65,68,68,71,71,74,74,75,75,74,74,75,75,72,72,73,73,74,74,75,75,73,73,74,74,73,73,74,74,70,70,72,72,74,74,77,77,78,78,80,80,78,78,79,79,80,80,79,79,80,80,81,81,84,84,83,83,84,84,85,85,88,88,89,89,90,90,92,92,95,95,94,94,91,91,90,90,89,89,90,90,93,93,94,94,96,96,94,94,95,95,94,94,95,95,96,96,97,97,96,96,97,97,98,98,100,100,101,101,105,105,108,108,109,109,108,108,109,109,110,110,107,107,108,108,106,106,109,109,112,112,113,113,116,116,117,117,119,119,120,120,122,122,121,121,122,122,123,123,124,124,128,128,127,127,125,125,124,124,123,123,124,124,127,127,128,128,130,130,132,132,130,130,131,131,129,129,130,130,134,134,136,136,137,137,139,139,141,141,145,145,149,149,150,150,153,153,154,154,155,155,154,154,153,153,152,152,151,151,150,150,149,149,147,147,148,148,154,154,155,155,157,157,159,159,158,158,157,157,156,156,155,155,156,156,158,158,159,159,163,163,164,164,165,165,173,173,172,172,171,171,170,170,174,174,178,178,180,180,182,182,183,183,182,182,184,184,182,182,181,181,178,178,176,176,177,177,178,178,180,180,181,181,184,184,183,183,182,182,184,184,185,185,184,184,185,185,183,183,182,182,181,181,180,180,179,179,180,180,182,182,184,184,186,186,187,187,189,189,191,191,190,190,191,191,189,189,190,190,188,188,186,186,184,184,183,183,182,182,181,181,180,180,182,182,181,181,182,182,184,184,186,186,187,187,186,186,180,180,179,179,174,174,175,175,174,174,175,175,174,174,175,175,177,177,178,178,174,174,175,175,174,174,173,173,171,171,167,167,166,166,168,168,170,170,171,171,170,170,168,168,169,169,172,172,173,173,172,172,170,170,168,168,166,166,165,165,163,163,162,162,164,164,166,166,162,162,159,159,157,157,155,155,150,150,152,152,153,153,154,154,153,153,152,152,151,151,149,149,147 };
  poly_y = new float[] { 187,187,185,185,184,184,183,183,182,182,183,183,182,182,180,180,178,178,175,175,176,176,177,177,171,171,173,173,175,175,177,177,179,179,180,180,182,182,183,183,184,184,181,181,180,180,178,178,176,176,174,174,172,172,174,174,171,171,173,173,174,174,173,173,169,169,167,167,165,165,164,164,163,163,162,162,163,163,161,161,160,160,158,158,156,156,155,155,153,153,150,150,149,149,147,147,145,145,144,144,142,142,138,138,137,137,136,136,135,135,134,134,135,135,134,134,133,133,129,129,128,128,127,127,126,126,125,125,124,124,122,122,121,121,120,120,118,118,116,116,115,115,110,110,107,107,105,105,103,103,102,102,99,99,98,98,97,97,98,98,99,99,98,98,97,97,96,96,94,94,93,93,92,92,90,90,91,91,93,93,94,94,95,95,92,92,89,89,88,88,87,87,85,85,84,84,83,83,81,81,79,79,78,78,80,80,79,79,77,77,76,76,75,75,74,74,71,71,70,70,69,69,67,67,66,66,65,65,66,66,65,65,64,64,66,66,67,67,69,69,70,70,71,71,72,72,74,74,75,75,76,76,78,78,75,75,74,74,73,73,74,74,75,75,74,74,72,72,71,71,70,70,68,68,71,71,72,72,74,74,75,75,76,76,77,77,78,78,79,79,81,81,79,79,78,78,76,76,72,72,71,71,70,70,71,71,70,70,73,73,72,72,73,73,74,74,73,73,79,79,80,80,75,75,73,73,72,72,70,70,69,69,68,68,67,67,64,64,63,63,66,66,67,67,68,68,67,67,65,65,63,63,61,61,60,60,59,59,58,58,57,57,59,59,63,63,62,62,64,64,67,67,68,68,69,69,68,68,69,69,70,70,71,71,75,75,76,76,78,78,80,80,82,82,83,83,85,85,87,87,88,88,85,85,84,84,87,87,88,88,89,89,90,90,91,91,93,93,96,96,98,98,99,99,100,100,102,102,104,104,105,105,104,104,107,107,106,106,105,105,107,107,108,108,112,112,113,113,114,114,115,115,116,116,115,115,116,116,117,117,118,118,121,121,122,122,124,124,127,127,128,128,127,127,128,128,129,129,130,130,132,132,133,133,135,135,136,136,138,138,139,139,140,140,141,141,143,143,147,147,145,145,143,143,141,141,142,142,141,141,142,142,143,143,146,146,150,150,151,151,152,152,155,155,154,154,155,155,161,161,162,162,161,161,160,160,159,159,160,160,161,161,162,162,163,163,166,166,167,167,166,166,169,169,171,171,173,173,175,175,177,177,179,179,180,180,181,181,185,185,186,186 };
  for (int i = 0; i < n_points; ++i) {
    poly_x[i] *= 3;
    poly_y[i] *= 3;
  }
  float[][] densified_poly = densify(n_points, poly_x, poly_y);
  new_poly_x = densified_poly[0];
  new_poly_y = densified_poly[1];
  n_new_points = new_poly_x.length;
  smoothen(n_new_points, new_poly_x, new_poly_y);
}

void keyPressed() {
  if (key == 'j') {
    weight_e -= 0.01;
    float[][] densified_poly = densify(n_points, poly_x, poly_y);
    new_poly_x = densified_poly[0];
    new_poly_y = densified_poly[1];
    smoothen(n_new_points, new_poly_x, new_poly_y);
  }
  else if (key == 'k') {
    weight_e += 0.01;
    float[][] densified_poly = densify(n_points, poly_x, poly_y);
    new_poly_x = densified_poly[0];
    new_poly_y = densified_poly[1];
    smoothen(n_new_points, new_poly_x, new_poly_y);
  }
  else if (key == 't') {
    show_original = !show_original;
  }
}

float threshold = 10;

void densify_line(
  float x0, float y0, float x1, float y1
, ArrayList new_poly_x, ArrayList new_poly_y
) {
  if (Math.hypot(x1 - x0, y1 - y0) < threshold) {
    new_poly_x.add(x0);
    new_poly_y.add(y0);
    return;
  }
  float mid_x = (x0 + x1) / 2;
  float mid_y = (y0 + y1) / 2;
  densify_line(x0, y0, mid_x, mid_y, new_poly_x, new_poly_y);
  densify_line(mid_x, mid_y, x1, y1, new_poly_x, new_poly_y);
}

float[] array_list_to_float_array(ArrayList<Float> float_list) {
  float[] float_array = new float[float_list.size()];
  int i = 0;
  for (Float f : float_list) {
    float_array[i++] = (f != null ? f : Float.NaN);
  }
  return float_array;
}

float[][] densify(int n_points, float[] poly_x, float[] poly_y) {
  ArrayList<Float> new_poly_x = new ArrayList<Float>();
  ArrayList<Float> new_poly_y = new ArrayList<Float>();
  for (int i = 0, j = n_points - 1; i < n_points; j = i, ++i) {
    densify_line(poly_x[j], poly_y[j], poly_x[i], poly_y[i], new_poly_x, new_poly_y);
  }
  return new float[][] {
    array_list_to_float_array(new_poly_x)
  , array_list_to_float_array(new_poly_y)
  };
}

float weight_e = 0.9;

float calc_weight(float dist) {
  return pow(weight_e, dist);
}

void smoothen(int n_points, float[] poly_x, float[] poly_y) {
  float[] dist = new float[n_points];
  float[] dist_r = new float[n_points];
  dist[0] = 0;
  dist_r[0] = 0;
  for (int i = 1; i < n_points; ++i) {
    dist[i] = dist[i - 1] + (float) Math.hypot(poly_x[i] - poly_x[i - 1], poly_y[i] - poly_y[i - 1]);
  }
  for (int i = n_points - 1, j = 0; i > 0; j = i, --i) {
    dist_r[i] = dist_r[j] +
      (float) Math.hypot(poly_x[i] - poly_x[j], poly_y[i] - poly_y[j]);
  }
  for (int i = 0; i < n_points; ++i) {
    float x = 0;
    float y = 0;
    float weight_sum = 0;
    for (int j = 0; j < n_points; ++j) {
      float weight = calc_weight(min(abs(dist[i] - dist[j]), abs(dist_r[i] - dist_r[j])));
      x += poly_x[j] * weight;
      y += poly_y[j] * weight;
      weight_sum += weight;
    }
    new_poly_x[i] = x / weight_sum;
    new_poly_y[i] = y / weight_sum;
  }
}

void draw() {
  background(255);
  if (show_original) {
    stroke(0);
    for (int i = 0, j = n_points - 1; i < n_points; j = i, ++i) {
      line(poly_x[j], poly_y[j], poly_x[i], poly_y[i]);
    }
  }
  stroke(255, 0, 0);
  for (int i = 0, j = n_new_points - 1; i < n_new_points; j = i, ++i) {
    line(new_poly_x[j], new_poly_y[j], new_poly_x[i], new_poly_y[i]);
  }
  fill(0);
  text("smoothness = " + weight_e, 10, 20);
  text("t: toggle original, j: lower smoothness, k: raise smoothness", 10, 40);
}
